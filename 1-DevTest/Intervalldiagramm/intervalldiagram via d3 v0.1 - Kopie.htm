<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <title>Intervalle im Obertonspektrum</title>
    <style>
        .axis path, .axis line {
            fill: none;
            stroke: black;
            shape-rendering: crispEdges;
        }
        .grid line {
            stroke: lightgrey;
            stroke-opacity: 0.7;
            shape-rendering: crispEdges;
        }
        .grid path {
            stroke-width: 0;
        }
    </style>
</head>
<body>
    <svg id="chart" width="800" height="600"></svg>
    <script>
        const data = [
            { x: 1, intervals: [1200] },
            { x: 2, intervals: [700, 1000] },
            { x: 3, intervals: [500, 800, 1000] },
            { x: 4, intervals: [400, 700, 900, 1000] },
            { x: 5, intervals: [300, 500, 800, 1000] },
            { x: 6, intervals: [200, 400, 700, 1000] },
            { x: 7, intervals: [100, 300, 500, 900] },
            { x: 8, intervals: [100, 400, 800] },
        ];

        const margin = { top: 20, right: 20, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select("#chart")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        const xScale = d3.scaleLinear()
            .domain([1, 8])
            .range([0, width]);

        const yScale = d3.scaleLinear()
            .domain([0, 1200])
            .range([height, 0]);

        const xAxis = d3.axisBottom(xScale).ticks(8).tickFormat(d => `ZÃ¤hler ${d}`);
        const yAxis = d3.axisLeft(yScale).ticks(10);

        const gridlines = d3.axisLeft(yScale)
            .tickSize(-width)
            .tickFormat("");

        svg.append("g")
            .attr("class", "grid")
            .call(gridlines)
            .attr("transform", "translate(0,0)");

        svg.append("g")
            .attr("class", "axis")
            .call(yAxis);

        svg.append("g")
            .attr("class", "axis")
            .attr("transform", `translate(0,${height})`)
            .call(xAxis);

        data.forEach(d => {
            const x = xScale(d.x);
            for (let i = 0; i < d.intervals.length - 1; i++) {
                svg.append("line")
                    .attr("x1", x)
                    .attr("y1", yScale(d.intervals[i]))
                    .attr("x2", x)
                    .attr("y2", yScale(d.intervals[i + 1]))
                    .attr("stroke", d3.schemeCategory10[d.x % 10])
                    .attr("stroke-width", 2);
            }

            d.intervals.forEach(y => {
                svg.append("circle")
                    .attr("cx", x)
                    .attr("cy", yScale(y))
                    .attr("r", 4)
                    .attr("fill", d3.schemeCategory10[d.x % 10]);
            });
        });
    </script>
</body>
</html>
