<!DOCTYPE html>
<html lang="de">
<head>
	<meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>##TITLE##</title>
    <link rel="stylesheet" href="stylesheet.css">
</head>
<body>

<h1>##TITLE##</h1>
<p style="font-size: 10px; text-align: left;">
    <a href="../Inhalt.html" style="text-decoration: none; color: gray;">zurück zum Inhaltsverzeichnis</a>
</p>

<table id="demo">
    <thead>
        <!-- Dynamische Spaltenüberschriften -->
    </thead>
    <tbody>
        <!-- Dynamische Inhalte -->
    </tbody>
</table>

<script src="dist/tablefilter/tablefilter.js"></script>
<script src="https://surikov.github.io/webaudiofont/npm/dist/WebAudioFontPlayer.js"></script>
<script src="https://surikov.github.io/webaudiofontdata/sound/0000_JCLive_sf2_file.js"></script>
<script src="js/PlayScript.js"></script>

<script>
    // JSON-Daten

const data = [
{ "Hew Rep PCL": "2336","Hew Rep Name": "C dim","Hewit Name PCL": "2336","Hewitt Name": "C dim","Betrag von": "3","tritonus auf": "0","Tritonus": "C -F#","Aufl�sung": "B -G ","nach PCL": "273","nach Rep PCL": "2184","nach Name PCL": "2184","nach Name": "C +","Betrag nach": "3","Betrag Delta": "0","Oberton vorher": "30:G#  25:F#, B","Oberton nachher": "24:C#, F , A   23:D#, G , B","Oberton Rang vorher": "30","Oberton Rang nachher": "24","Oberton Rang Verbesserung": "-6","Anz. Tritonus vorher": "1","Anz. Tritonus nachher": "0","Anz. Tritonus Delta": "-1" },
{ "Hew Rep PCL": "2336","Hew Rep Name": "C dim","Hewit Name PCL": "2336","Hewitt Name": "C dim","Betrag von": "3","tritonus auf": "6","Tritonus": "F#-C ","Aufl�sung": "F -C#","nach PCL": "1344","nach Rep PCL": "2688","nach Name PCL": "2688","nach Name": "C Ganzton Dreiklang","Betrag nach": "3","Betrag Delta": "0","Oberton vorher": "30:G#  25:F#, B","Oberton nachher": "30:C#  29:D#","Oberton Rang vorher": "30","Oberton Rang nachher": "30","Oberton Rang Verbesserung": "0","Anz. Tritonus vorher": "1","Anz. Tritonus nachher": "0","Anz. Tritonus Delta": "-1" }
];


    // Tabelle dynamisch erstellen
    const table = document.getElementById('demo');
    const thead = table.querySelector('thead');
    const tbody = table.querySelector('tbody');

    // Spaltenüberschriften aus JSON-Schlüsseln extrahieren
    const columns = Object.keys(data[0]);
    const headerRow = document.createElement('tr');
    columns.forEach(column => {
        const th = document.createElement('th');
        th.textContent = column;
        headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);

    // Datenzeilen erstellen
    data.forEach(row => {
        const tr = document.createElement('tr');
        columns.forEach(column => {
            const td = document.createElement('td');

            // Falls der Spaltenname "PCL" enthält, spezialisierte Inhalte einfügen
			if (column.includes("PCL")) {
				const pclValue = row[column].toString().padStart(4, '0'); // Führende Nullen hinzufügen
				const filePath = `../../Pocket/HTML/${pclValue}.htm`;

				td.innerHTML = `
					<img border="0" src="../../Pocket/gif/Kreise/${pclValue}.gif" height="24" onclick="playChord(1${pclValue})" style="cursor: pointer;">
					<img border="0" src="../../Pocket/gif/Score/Scale/${pclValue}.gif" height="24" onclick="playScale(1${pclValue})" style="cursor: pointer;">
					<br>
					<a href="${filePath}" style="font-size: 10px; color: gray;" target="_blank">${pclValue}</a>
				`;
			} else if (column.includes("Midi")) {
				const midiValue = row[column]; // String direkt verwenden
				const pclValue = midiValue.toString().padStart(4, '0'); // Führende Nullen für GIF-Pfad hinzufügen

				td.innerHTML = `
					<img border="0" src="../../Pocket/gif/Kreise/${pclValue}.gif" height="24" onclick="playChord('${midiValue}')" style="cursor: pointer;">
				`;
			} else {
				// Standardwert einfügen
				td.textContent = row[column];
			}
            tr.appendChild(td);
        });
        tbody.appendChild(tr);
    });

    // TableFilter initialisieren
    const filtersConfig = {
        base_path: 'dist/tablefilter/',
        extensions: [{ name: 'sort' }]
    };
    const tf = new TableFilter('demo', filtersConfig);
    tf.init();
</script>

</body>
</html>
